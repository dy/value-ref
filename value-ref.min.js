export default e=>new r(e);const e=e=>e?.map?.((e=>e[3]())),s=new FinalizationRegistry(e);class r{#e=[];constructor(e){this[0]=e,s.register(this,this.#e)}get value(){return this[0]}set value(e){this[0]=e;for(let s of this.#e)(s[0]||s[1]||s[2]).deref()?(s[4]?.call?.(),s[4]=s[0].deref()?.(e)):s[3]()}valueOf(){return this.value}toString(){return this.value}[Symbol.toPrimitive](e){return this.value}subscribe(e,s,r){s=(e=e?.next||e)?.error||s,r=e?.complete||r;const t=this.#e,i=()=>(o[4]?.call?.(),t.splice(t.indexOf(o)>>>0,1)),o=[e&&new WeakRef(e),s&&new WeakRef(s),r&&new WeakRef(r),i,void 0!==this[0]?e(this[0]):null];return t.push(o),i.unsubscribe=i}map(e){const s=new r;return this.subscribe((r=>s.value=e(r))),s}error(e){this.#e.map((s=>s[1]?.deref()?.(e)))}[Symbol.observable||=Symbol.for("observable")](){return this}async*[Symbol.asyncIterator](){let e,s=[],r=new Promise((s=>e=s)),t=this.subscribe((t=>(s.push(t),e(),r=new Promise((s=>e=s)))));try{for(;;)yield*s.splice(0),await r}catch{}t()}[Symbol.dispose||=Symbol("dispose")](){e(this.#e),delete this[0],this.#e=null}}