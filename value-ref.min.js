Symbol.observable||=Symbol("observable");const e=new FinalizationRegistry((e=>e.call?.())),s=(...e)=>new i(...e),r=e=>e?.map?.((e=>e[3]())),t=new FinalizationRegistry(r);class i extends Array{#e=[];constructor(...e){super(),e.length&&this.push(...e),t.register(this,this.#e)}get value(){return this[0]}set value(e){this[0]=e,this.set(...this)}set(...e){Object.assign(this,e);for(let e of this.#e)e[4]?.call?.(),e[4]=e[0](...this)}valueOf(){return this.value}toString(){return this.value}toJSON(){return this.value}[Symbol.toPrimitive](e){return this.value}subscribe(e,s,r){s=(e=e?.next||e)?.error||s,r=e?.complete||r;const t=this.#e,i=()=>(l[4]?.call?.(),t.splice(t.indexOf(l)>>>0,1)),l=[e,s,r,i,this.length?e(...this):null];return t.push(l),i.unsubscribe=i}error(e){this.#e.map((s=>s[1]?.(e)))}[Symbol.observable||=Symbol.for("observable")](){return this}async*[Symbol.asyncIterator](){let e,s=[],r=new Promise((s=>e=s)),t=this.subscribe((t=>(s.push(t),e(),r=new Promise((s=>e=s)))));try{for(;;)yield*s.splice(0),await r}catch{}t()}[Symbol.dispose||=Symbol("dispose")](){r(this.#e),this.length=0,this.#e=null}}i.from=s.from=(...s)=>{let r,t,l;return s[s.length-1]?.call&&(r=s.pop()),t=[],s.map(((s,i)=>{return(e=>e&&!!(e[Symbol.observable]||e[Symbol.asyncIterator]||e.call&&e.set||e.subscribe||e.then))(s)?(a=e=>(t[i]=e,l&&(r?l.value=r(...t):l.set(...t))),(o=s)&&(h=(o[Symbol.observable]?.()||o).subscribe?.(a,n,undefined),u=h&&(()=>h.unsubscribe?.())||o.set&&o.call?.(b,a)||(o.then?.((e=>{!b&&a(e)}),n)||(async e=>{try{for await(e of o){if(b)return;a(e)}}catch(e){}})())&&(e=>b=1),e.register(o,u),u)):t[i]=s;var o,a,n,b,u,h})),l=r?new i(r(...t)):new i(...t)};export{s as default};