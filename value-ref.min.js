export default s=>new e(s);class e{#e=[];constructor(e){this[0]=e}get value(){return this[0]}set value(e){this[0]=e;for(let s of this.#e)s[4]?.call?.(),(s[0]||s[1]||s[2]).deref()?s[4]=s[0].deref()?.(e):s[3]()}valueOf(){return this.value}toString(){return this.value}[Symbol.toPrimitive](e){return this.value}subscribe(e,s,r){s=(e=e?.next||e)?.error||s,r=e?.complete||r;const t=()=>this.#e.length&&this.#e.splice(this.#e.indexOf(i)>>>0,1),i=[e&&new WeakRef(e),s&&new WeakRef(s),r&&new WeakRef(r),t,void 0!==this[0]?e(this[0]):null];return this.#e.push(i),t.unsubscribe=t}map(s){const r=new e;return this.subscribe((e=>r.value=s(e))),r}error(e){this.#e.map((s=>s[1]?.deref()?.(e)))}[Symbol.observable||=Symbol.for("observable")](){return this}async*[Symbol.asyncIterator](){let e,s=[],r=new Promise((s=>e=s)),t=this.subscribe((t=>(s.push(t),e(),r=new Promise((s=>e=s)))));try{for(;;)yield*s.splice(0),await r}catch{}t()}dispose(){this[0]=null;const e=this.#e.map((e=>(e[4]?.call?.(),e[2]?.deref()?.(),e[3])));this.#e.length=0,e.map((e=>e()))}[Symbol.dispose||=Symbol("dispose")](){return this.dispose()}}